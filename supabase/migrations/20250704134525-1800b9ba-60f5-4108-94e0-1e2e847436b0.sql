
-- Create profiles table
CREATE TABLE public.profiles (
  id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  user_id uuid REFERENCES auth.users(id) ON DELETE CASCADE,
  birth_year bigint,
  created_at timestamp with time zone DEFAULT now() NOT NULL
);

-- Create journal_entries table
CREATE TABLE public.journal_entries (
  id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  user_id uuid REFERENCES auth.users(id) ON DELETE CASCADE,
  entry_text text,
  date date,
  created_at timestamp with time zone DEFAULT now() NOT NULL
);

-- Create virtue_entries table (if it doesn't exist)
CREATE TABLE public.virtue_entries (
  id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  user_id uuid REFERENCES auth.users(id) ON DELETE CASCADE NOT NULL,
  courage smallint,
  wisdom smallint,
  justice smallint,
  temperance smallint,
  date date,
  created_at timestamp without time zone DEFAULT now()
);

-- Enable Row Level Security
ALTER TABLE public.profiles ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.journal_entries ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.virtue_entries ENABLE ROW LEVEL SECURITY;

-- Create RLS policies for profiles
CREATE POLICY "Users can manage their own profile" ON public.profiles
  FOR ALL USING (auth.uid() = user_id) WITH CHECK (auth.uid() = user_id);

-- Create RLS policies for journal_entries
CREATE POLICY "Users can read their own journal entries" ON public.journal_entries
  FOR SELECT USING (auth.uid() = user_id);

CREATE POLICY "Users can insert their own journal entries" ON public.journal_entries
  FOR INSERT WITH CHECK (auth.uid() = user_id);

-- Create RLS policies for virtue_entries
CREATE POLICY "Users can read their own virtue entries" ON public.virtue_entries
  FOR SELECT USING (auth.uid() = user_id);

CREATE POLICY "Users can insert their own virtue entries" ON public.virtue_entries
  FOR INSERT WITH CHECK (auth.uid() = user_id);
